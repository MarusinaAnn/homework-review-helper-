document.addEventListener("DOMContentLoaded", async function () {
    const kodirovkaInput = document.getElementById("kodirovka");
    const zadanieInput = document.getElementById("zadanie");
    const ballsSelect = document.getElementById("balls");
    const templateTextArea = document.getElementById("template");
    const solutionContainer = document.getElementById("solution-container");
    const copyButton = document.getElementById("copyTemplate");

    let database = {}; // –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –ø–æ –≤—Ç–æ—Ä–æ–π –±—É–∫–≤–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    function getMonthFromCode(code) {
        const monthMap = {
            '—Å': '–°–ï–ù–¢–Ø–ë–†–¨', '–æ': '–û–ö–¢–Ø–ë–†–¨', '–Ω': '–ù–û–Ø–ë–†–¨', '–¥': '–î–ï–ö–ê–ë–†–¨',
            '—è': '–Ø–ù–í–ê–†–¨', '—Ñ': '–§–ï–í–†–ê–õ–¨', '–º': '–ú–ê–†–¢', '–∞': '–ê–ü–†–ï–õ–¨',
            '–π': '–ú–ê–ô', '—Ö': '–•–ê–†–î'
        };
        return monthMap[code[1]?.toLowerCase()] || '–ú–ê–†–¢'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–∞—Ä—Ç
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ JSON –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async function loadDatabase() {
        try {
            const response = await fetch("homework_db.json");
            database = await response.json();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
        }
    }

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–µ—Å—å —Å–ø–∏—Å–æ–∫, –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è)
function updateSuggestions(inputElement, dataListId, items) {
    const dataList = document.getElementById(dataListId);
    dataList.innerHTML = "";

    let value = inputElement.value.toLowerCase();
    let filteredItems = value
        ? items.filter(item => item.toLowerCase().includes(value))
        : items; // –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫

    filteredItems.forEach(item => {
        let option = document.createElement("option");
        option.value = item;
        dataList.appendChild(option);
    });
}

// –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–µ ‚Äî –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫
kodirovkaInput.addEventListener("focus", function () {
    kodirovkaInput.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    updateSuggestions(kodirovkaInput, "kodirovka-list", Object.keys(database));
});


kodirovkaInput.addEventListener("input", function () {
    updateSuggestions(kodirovkaInput, "kodirovka-list", Object.keys(database));
});

 // –ü—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ –Ω–æ–º–µ—Ä–µ –∑–∞–¥–∞–Ω–∏—è ‚Äî –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
 zadanieInput.addEventListener("focus", function () {
    zadanieInput.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ
    const selectedKod = kodirovkaInput.value.trim();
    if (database[selectedKod]) {
        updateSuggestions(zadanieInput, "zadanie-list", Object.keys(database[selectedKod]));
    }
});

// –ê–≤—Ç–æ–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ –∑–∞–¥–∞–Ω–∏–π (—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è –ø–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º)
zadanieInput.addEventListener("input", function () {
    const selectedKod = kodirovkaInput.value.trim();
    if (database[selectedKod]) {
        updateSuggestions(zadanieInput, "zadanie-list", Object.keys(database[selectedKod]));
    }
});

// –ü—Ä–∏ —Å–º–µ–Ω–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ª–µ –∑–∞–¥–∞–Ω–∏—è
kodirovkaInput.addEventListener("change", function () {
    zadanieInput.value = ""; // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è
    ballsSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–ª–ª—ã</option>';
    templateTextArea.value = ""; // –û—á–∏—â–∞–µ–º —à–∞–±–ª–æ–Ω
    solutionContainer.innerHTML = ""; // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
});

// –ü—Ä–∏ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –±–∞–ª–ª—ã –∏ —à–∞–±–ª–æ–Ω
zadanieInput.addEventListener("change", function () {
    ballsSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–ª–ª—ã</option>';
    templateTextArea.value = "";
    solutionContainer.innerHTML = "";
});

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–ª–ª–æ–≤ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è
    zadanieInput.addEventListener("change", function () {
        ballsSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–ª–ª—ã</option>';
        const selectedKod = kodirovkaInput.value.trim();
        const selectedZad = zadanieInput.value.trim();
        if (database[selectedKod] && database[selectedKod][selectedZad]) {
            Object.keys(database[selectedKod][selectedZad]["cases"]).forEach(b => {
                let option = document.createElement("option");
                option.value = b;
                option.textContent = b;
                ballsSelect.appendChild(option);
            });
        }
    });

    // üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º —à–∞–±–ª–æ–Ω –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –±–∞–ª–ª–æ–≤
    ballsSelect.addEventListener("change", function () {
        const selectedKod = kodirovkaInput.value.trim();
        const selectedZad = zadanieInput.value.trim();
        const selectedBall = ballsSelect.value;

        if (database[selectedKod] && database[selectedKod][selectedZad]) {
            const data = database[selectedKod][selectedZad];
            const caseData = data["cases"]?.[selectedBall] || { comment: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω", solution_images: [] };

            templateTextArea.value = `${data.start}\n\n${caseData.comment}\n\n${data.motivation}`;

            let examType = selectedKod.startsWith("–ï") ? "–ï–ì–≠" : "–û–ì–≠"; 
            let month = getMonthFromCode(selectedKod); 

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            solutionContainer.innerHTML = "";
            caseData.solution_images.forEach(imgName => {
                let imgElement = document.createElement("img");
                imgElement.src = `https://marusinaann.github.io/solutions/${examType}/${month}/${selectedKod}/${imgName}`;
                imgElement.alt = "–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ";
                imgElement.style.maxWidth = "100%";
                imgElement.style.display = "block"; 
                imgElement.style.marginBottom = "10px"; 
                solutionContainer.appendChild(imgElement);
            });
        } else {
            console.warn("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:", selectedKod, selectedZad, selectedBall);
            templateTextArea.value = "–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω";
            solutionContainer.innerHTML = "";
        }
    });

    copyButton.addEventListener("click", async function () {
        try {
            const selectedKod = kodirovkaInput.value.trim();
            const selectedZad = zadanieInput.value.trim();
            const selectedBall = ballsSelect.value;
    
            if (!database[selectedKod] || !database[selectedKod][selectedZad] || !database[selectedKod][selectedZad]["cases"][selectedBall]) {
                alert("–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                return;
            }
    
            const data = database[selectedKod][selectedZad];
            const caseData = data["cases"][selectedBall];
    
            let examType = selectedKod.startsWith("–ï") ? "–ï–ì–≠" : "–û–ì–≠";
            let month = getMonthFromCode(selectedKod);
    
            let imagesHTML = "";
            for (let img of caseData.solution_images) {
                let imgSrc = `https://marusinaann.github.io/solutions/${examType}/${month}/${selectedKod}/${img}`;
                
                imagesHTML += `<img src="${imgSrc}" alt="–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ" style="max-width:100%; display:block; margin-bottom:10px;">`;
            }
    
            const htmlContent = `
            <div>
                <p>${data.start}</p>
                <p style="margin-bottom:10px;">&nbsp;</p> <!-- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ -->
                <p>${caseData.comment}</p>
                ${imagesHTML}
                <p>${data.motivation}</p>
            </div>
        `;
    
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            const tempElement = document.createElement("div");
            tempElement.innerHTML = htmlContent;
            document.body.appendChild(tempElement);
    
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Range –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è HTML-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const range = document.createRange();
            range.selectNodeContents(tempElement);
            const selection = window.getSelection();
            selection.removeAllRanges();
            selection.addRange(range);
    
            document.execCommand("copy");
            document.body.removeChild(tempElement);
    
            alert("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ", error);
            alert("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞.");
        }
    });
    

    await loadDatabase();
});
